import propTypes from '@styled-system/prop-types'
import { pick } from '@styled-system/props'
import PropTypes from 'prop-types'
import React from 'react'

import { StyledHeading } from './Heading.styles'

export const HeadingBase = ({
  as,
  className,
  children,
  variant,
  ...restOfProps
}) => {
  return (
    <StyledHeading
      as={as}
      className={className}
      variant={variant}
      {...pick(restOfProps)}
    >
      {children}
    </StyledHeading>
  )
}

HeadingBase.propTypes = {
  /**
   * Switches the component out with a different HTML element or React component while keeping the same styles.
   */
  as: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.node
  ]),

  /**
   * Component children
   */
  children: PropTypes.oneOfType([
    PropTypes.arrayOf(PropTypes.node),
    PropTypes.node
  ]),

  /**
   * Adds in additional class names in addition to what is generated by styled components.
   */
  className: PropTypes.string,

  /**
   * Different variants of the component styles
   */
  variant: PropTypes.oneOf([
    'h1',
    'h2',
    'h3',
    'h4'
  ]),

  /**
   * Styled system props
   */
  ...propTypes.color,
  ...propTypes.typography,
  ...propTypes.space
}

HeadingBase.defaultProps = {
  variant: 'h1'
}

export const H1 = (props) => {
  return (
    <HeadingBase
      as='h1'
      variant='h1'
      {...props}
    />
  )
}

export const H2 = (props) => {
  return (
    <HeadingBase
      as='h2'
      variant='h2'
      {...props}
    />
  )
}

export const H3 = (props) => {
  return (
    <HeadingBase
      as='h3'
      variant='h3'
      {...props}
    />
  )
}

export const H4 = (props) => {
  return (
    <HeadingBase
      as='h4'
      variant='h4'
      {...props}
    />
  )
}
